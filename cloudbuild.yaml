steps:
- name: 'gcr.io/cloud-builders/docker' # Step 1: Build Docker image
  args: ['build', '-t', 'gcr.io/$PROJECT_ID/myapp:latest', '-t', 'gcr.io/$PROJECT_ID/myapp:$COMMIT_SHA', '-t', 'gcr.io/$PROJECT_ID/myapp:$BUILD_ID', '.']
  id: 'build-image-myapp'
  waitFor: ['-']  # The '-' indicates that this step begins immediately.

- name: 'gcr.io/cloud-builders/docker' # Step 2: Push Docker image to Container Registry
  args: ['push', 'gcr.io/$PROJECT_ID/myapp']
  id: 'push-image-to-container-registry'
  waitFor: ['build-image-myapp']

- name: 'gcr.io/cloud-builders/gcloud' # Step 3: Deploy to Cloud Run
  args:
  - 'run'
  - 'deploy'
  - 'myawesomeapp'
  - '--image'
  - 'gcr.io/$PROJECT_ID/myapp:$COMMIT_SHA'
  - '--region'
  - 'us-east4'
  - '--platform'
  - 'managed'
  - '--allow-unauthenticated'
  waitFor: ['push-image-to-container-registry']
  id: 'deploy-to-cloud-run'

- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim' # Step 4: Fetch build log
  entrypoint: '/bin/bash'
  args: ['-c', 'gcloud builds log $BUILD_ID > /workspace/buildlog.log']
  waitFor: ['deploy-to-cloud-run']
  id: 'fetch-build-log'

- name: 'bash' # Step 5: Create artifacts zip
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      tar -czvf /workspace/artifacts.tar.gz app requirements.txt /workspace/buildlog.log
  waitFor: ['fetch-build-log']
  id: 'create-artifacts-zip'

logsBucket: 'gs://logs-codebuild-$PROJECT_ID/$BUILD_ID' # Specify logs bucket location
options:
  logging: GCS_ONLY # Only log to Google Cloud Storage

images:
- 'gcr.io/$PROJECT_ID/myapp:latest' # Define Docker image tags
- 'gcr.io/$PROJECT_ID/myapp:$COMMIT_SHA'
- 'gcr.io/$PROJECT_ID/myapp:$BUILD_ID'

artifacts:
  objects:
    location: 'gs://devops-$PROJECT_ID/$BUILD_ID' # Specify artifacts location
    paths: ['/workspace/artifacts.tar.gz'] # Specify paths for artifacts
